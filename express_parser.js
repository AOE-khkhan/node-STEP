/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var express_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"expression":4,"bag_or_set":5,"BAG":6,"SET":7,"optional_inverse":8,"INVERSE":9,"identifier":10,":":11,"range":12,"OF":13,"FOR":14,";":15,"optional_abstract_el":16,"ABSTRACT":17,"SUPERTYPE":18,"SUBTYPE":19,"(":20,"list_id":21,")":22,"ONEOF":23,"ANDOR":24,"optional_derive":25,"DERIVE":26,"list_der":27,"list_der_item":28,"composite_type":29,":=":30,"expr2":31,"SELF":32,"\\\\":33,".":34,"optional_abstract":35,"SCHEMA":36,"END_SCHEMA":37,"CONSTANT":38,"constants":39,"END_CONSTANT":40,"TYPE":41,"type":42,"END_TYPE":43,"ENTITY":44,"entity_description":45,"optional_unique":46,"optional_where_rules":47,"END_ENTITY":48,"RULE":49,"END_RULE":50,"WHERE":51,"rules":52,"UNIQUE":53,"optional_OPTIONAL":54,"OPTIONAL":55,"basic_type":56,"LIST":57,"ARRAY":58,"entity_prop":59,"constant":60,"stuff":61,"string":62,"expr":63,"||":64,"'":65,"constant_b":66,",":67,"REAL":68,"INTEGER":69,"NUMBER":70,"STRING":71,"LOGICAL":72,"op":73,"<=":74,">=":75,"AND":76,"OR":77,"IN":78,"<*":79,"function":80,"EXISTS":81,"QUERY":82,"SIZEOF":83,"TYPEOF":84,"NVL":85,"USEDIN":86,"list_item":87,"list":88,"id2":89,"\\":90,"variable":91,"list_arguments":92,"<":93,">":94,"|":95,"<>":96,"*":97,"+":98,"-":99,"=":100,":<>:":101,":=:":102,"NOT":103,"[":104,"]":105,"rule":106,"?":107,"type_declaration":108,"ENUMERATION":109,"SELECT":110,"$accept":0,"$end":1},
terminals_: {2:"error",6:"BAG",7:"SET",9:"INVERSE",10:"identifier",11:":",13:"OF",14:"FOR",15:";",17:"ABSTRACT",18:"SUPERTYPE",19:"SUBTYPE",20:"(",22:")",23:"ONEOF",24:"ANDOR",26:"DERIVE",30:":=",32:"SELF",33:"\\\\",34:".",36:"SCHEMA",37:"END_SCHEMA",38:"CONSTANT",40:"END_CONSTANT",41:"TYPE",43:"END_TYPE",44:"ENTITY",48:"END_ENTITY",49:"RULE",50:"END_RULE",51:"WHERE",53:"UNIQUE",55:"OPTIONAL",57:"LIST",58:"ARRAY",64:"||",65:"'",67:",",68:"REAL",69:"INTEGER",70:"NUMBER",71:"STRING",72:"LOGICAL",74:"<=",75:">=",76:"AND",77:"OR",78:"IN",79:"<*",81:"EXISTS",82:"QUERY",83:"SIZEOF",84:"TYPEOF",85:"NVL",86:"USEDIN",90:"\\",93:"<",94:">",95:"|",96:"<>",97:"*",98:"+",99:"-",100:"=",101:":<>:",102:":=:",103:"NOT",104:"[",105:"]",107:"?",109:"ENUMERATION",110:"SELECT"},
productions_: [0,[3,1],[3,2],[5,1],[5,1],[8,0],[8,10],[16,2],[16,5],[16,8],[16,5],[16,8],[16,10],[16,13],[25,0],[25,2],[27,1],[27,2],[28,6],[28,8],[28,10],[35,0],[35,1],[35,2],[35,3],[4,3],[4,2],[4,4],[4,4],[4,11],[4,10],[4,10],[47,0],[47,2],[46,0],[46,5],[54,0],[54,1],[29,1],[29,1],[29,4],[29,5],[29,4],[29,4],[59,4],[59,5],[45,1],[45,2],[39,1],[39,2],[61,4],[61,3],[63,1],[63,3],[62,2],[66,4],[60,3],[21,1],[21,3],[21,3],[56,1],[56,1],[56,1],[56,1],[56,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[87,5],[87,1],[88,1],[88,3],[89,1],[89,3],[89,3],[89,3],[89,1],[89,5],[89,6],[89,4],[89,3],[89,2],[91,1],[91,1],[91,5],[92,0],[92,1],[92,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,2],[31,4],[31,6],[31,4],[31,6],[31,1],[31,3],[31,4],[31,6],[31,3],[106,3],[52,2],[52,3],[12,5],[12,5],[12,5],[108,8],[108,7],[108,7],[108,7],[108,4],[108,4],[42,1],[42,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 25:
           // console.log(" identifier ",$$[$0-1]);
           yy.grammar = {};

        
break;
case 57:
               this.$ = [ $$[$0] ];
               // console.log(" A =",this.$);
            
break;
case 58:
              this.$ = [ $$[$0-2] , $$[$0-1] ]
            
break;
case 59:
              //console.log(" B =",$$[$0-2],$$[$0]);
              // this.$ = $$[$0]
              this.$ = $$[$0]
              $$[$0].unshift($$[$0-2]);
           
break;
case 130:
                       // console.log("range !!!",$$[$0-3]);
                    
break;
case 133:
                         // console.log(" ",$$[$0-7],"ENUMERATION OF ", $$[$0-2]);
                         var name = $$[$0-7];
                         var list = $$[$0-2];
                         yy.grammar[name] = {
                            type: "enumeration",
                            enum: $$[$0-2]
                         };
                     
break;
}
},
table: [{3:1,4:2,36:[1,3],37:[1,4],38:[1,5],41:[1,6],44:[1,7],49:[1,8]},{1:[3]},{1:[2,1],3:9,4:2,36:[1,3],37:[1,4],38:[1,5],41:[1,6],44:[1,7],49:[1,8]},{10:[1,10]},{15:[1,11]},{10:[1,14],39:12,60:13},{10:[1,17],42:15,108:16},{10:[1,18]},{10:[1,19]},{1:[2,2]},{15:[1,20]},{1:[2,26],36:[2,26],37:[2,26],38:[2,26],41:[2,26],44:[2,26],49:[2,26]},{40:[1,21]},{10:[1,14],39:22,40:[2,48],60:13},{11:[1,23]},{43:[1,24]},{43:[2,139],51:[1,25]},{100:[1,26]},{15:[2,21],16:28,17:[1,29],18:[1,31],19:[1,30],35:27},{14:[1,32]},{1:[2,25],36:[2,25],37:[2,25],38:[2,25],41:[2,25],44:[2,25],49:[2,25]},{15:[1,33]},{40:[2,49]},{10:[1,35],66:34},{15:[1,36]},{10:[1,39],52:37,106:38},{7:[1,42],10:[1,45],56:44,57:[1,41],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50],109:[1,40],110:[1,43]},{15:[1,51]},{15:[2,22],16:52,17:[1,29],18:[1,31],19:[1,30]},{18:[1,53]},{13:[1,54]},{13:[1,55]},{20:[1,56]},{1:[2,27],36:[2,27],37:[2,27],38:[2,27],41:[2,27],44:[2,27],49:[2,27]},{10:[2,56],40:[2,56]},{30:[1,57]},{1:[2,28],36:[2,28],37:[2,28],38:[2,28],41:[2,28],44:[2,28],49:[2,28]},{43:[2,140]},{15:[1,58]},{11:[1,59]},{13:[1,60]},{12:61,104:[1,62]},{12:63,104:[1,62]},{20:[1,64]},{15:[1,65]},{15:[1,66]},{15:[2,60],30:[2,60]},{15:[2,61],30:[2,61]},{15:[2,62],30:[2,62]},{15:[2,63],30:[2,63]},{15:[2,64],30:[2,64]},{8:68,9:[1,70],10:[1,71],26:[2,5],45:67,48:[2,5],51:[2,5],53:[2,5],59:69},{15:[2,23],16:72,17:[1,29],18:[1,31],19:[1,30]},{15:[2,7],17:[2,7],18:[2,7],19:[2,7]},{20:[1,73]},{20:[1,74]},{10:[1,76],21:75},{10:[1,79],61:78,63:77},{10:[1,39],43:[2,128],48:[2,128],50:[2,128],52:80,106:38},{10:[1,85],20:[1,88],31:81,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{20:[1,97]},{13:[1,98]},{70:[1,99]},{13:[1,100]},{10:[1,76],21:101},{43:[2,137],51:[2,137]},{43:[2,138],51:[2,138]},{8:102,9:[1,70],26:[2,5],48:[2,5],51:[2,5],53:[2,5]},{26:[2,34],46:103,48:[2,34],51:[2,34],53:[1,104]},{9:[2,46],10:[1,71],26:[2,46],45:105,48:[2,46],51:[2,46],53:[2,46],59:69},{10:[1,106]},{11:[1,107]},{15:[2,24]},{10:[1,76],21:108,23:[1,109]},{10:[1,76],21:110,23:[1,111]},{22:[1,112]},{15:[2,57],22:[2,57],24:[1,113],67:[1,114]},{15:[1,115],64:[1,116]},{15:[2,52],64:[2,52]},{20:[1,117]},{43:[2,129],48:[2,129],50:[2,129]},{15:[2,127],24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136]},{15:[2,116],22:[2,116],24:[2,116],33:[2,116],64:[2,116],67:[2,116],74:[2,116],75:[2,116],76:[2,116],77:[2,116],78:[2,116],79:[2,116],93:[2,116],94:[2,116],95:[2,116],96:[2,116],97:[2,116],98:[2,116],99:[2,116],100:[2,116],101:[2,116],102:[2,116],105:[2,116]},{10:[1,85],20:[1,88],31:137,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{20:[1,138]},{15:[2,81],20:[1,139],22:[2,81],24:[2,81],33:[2,81],34:[1,140],64:[2,81],67:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81],78:[2,81],79:[2,81],93:[2,81],94:[2,81],95:[2,81],96:[2,81],97:[2,81],98:[2,81],99:[2,81],100:[2,81],101:[2,81],102:[2,81],104:[2,81],105:[2,81]},{15:[2,122],22:[2,122],24:[2,122],33:[2,122],64:[2,122],67:[2,122],74:[2,122],75:[2,122],76:[2,122],77:[2,122],78:[2,122],79:[2,122],93:[2,122],94:[2,122],95:[2,122],96:[2,122],97:[2,122],98:[2,122],99:[2,122],100:[2,122],101:[2,122],102:[2,122],104:[1,141],105:[2,122]},{10:[1,85],20:[1,88],31:143,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,92:142,103:[1,83],104:[1,87],105:[2,94]},{10:[1,85],20:[1,88],31:144,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{20:[2,71]},{20:[2,72]},{20:[2,73]},{20:[2,74]},{20:[2,75]},{20:[2,76]},{15:[2,85],22:[2,85],24:[2,85],33:[2,85],34:[1,145],64:[2,85],67:[2,85],74:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85],79:[2,85],90:[1,146],93:[2,85],94:[2,85],95:[2,85],96:[2,85],97:[2,85],98:[2,85],99:[2,85],100:[2,85],101:[2,85],102:[2,85],104:[2,85],105:[2,85]},{10:[1,147],65:[1,148]},{10:[1,76],21:149},{10:[1,150]},{11:[1,151]},{10:[1,152]},{22:[1,153]},{26:[2,34],46:154,48:[2,34],51:[2,34],53:[1,104]},{25:155,26:[1,156],48:[2,14],51:[2,14]},{10:[1,157]},{9:[2,47],26:[2,47],48:[2,47],51:[2,47],53:[2,47]},{11:[1,158]},{7:[1,164],10:[1,162],29:159,55:[1,160],56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{22:[1,166]},{20:[1,167]},{22:[1,168]},{20:[1,169]},{15:[1,170]},{10:[1,171]},{10:[1,76],21:172},{10:[2,55],40:[2,55]},{10:[1,79],61:173},{22:[1,175],62:174,65:[1,176]},{10:[1,85],20:[1,88],31:177,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:178,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:179,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:180,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:181,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:182,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:183,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:184,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:185,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:186,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:187,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:188,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:189,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:190,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:191,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:192,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:193,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:194,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],31:195,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{15:[2,117],22:[2,117],24:[2,117],33:[2,117],64:[2,117],67:[2,117],74:[2,117],75:[2,117],76:[2,117],77:[2,117],78:[2,117],79:[2,117],93:[2,117],94:[2,117],95:[2,117],96:[2,117],97:[2,117],98:[2,117],99:[2,117],100:[2,117],101:[2,117],102:[2,117],105:[2,117]},{10:[1,85],20:[1,88],22:[2,94],31:143,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,92:196,103:[1,83],104:[1,87]},{10:[1,85],20:[1,88],22:[2,94],31:143,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,92:197,103:[1,83],104:[1,87]},{10:[1,199],32:[1,95],65:[1,96],89:198},{10:[1,85],20:[1,88],31:200,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{105:[1,201]},{22:[2,95],24:[1,123],33:[1,134],64:[1,128],67:[1,202],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136],105:[2,95]},{22:[1,203],24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136]},{10:[1,199],32:[1,95],65:[1,96],89:204},{10:[1,199],32:[1,95],65:[1,96],89:205},{34:[1,206],65:[1,207]},{15:[2,90],22:[2,90],24:[2,90],33:[2,90],64:[2,90],67:[2,90],74:[2,90],75:[2,90],76:[2,90],77:[2,90],78:[2,90],79:[2,90],93:[2,90],94:[2,90],95:[2,90],96:[2,90],97:[2,90],98:[2,90],99:[2,90],100:[2,90],101:[2,90],102:[2,90],104:[2,90],105:[2,90]},{22:[1,208]},{15:[1,209]},{10:[1,212],70:[1,211],107:[1,210]},{15:[1,213]},{15:[1,214]},{25:215,26:[1,156],48:[2,14],51:[2,14]},{47:216,48:[2,32],51:[1,217]},{10:[1,220],27:218,28:219,32:[1,221]},{11:[1,222]},{5:223,6:[1,224],7:[1,225]},{15:[1,226]},{7:[1,164],10:[1,162],29:227,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{15:[2,38],30:[2,38]},{15:[2,39],30:[2,39]},{12:228,104:[1,62]},{12:229,104:[1,62]},{12:230,104:[1,62]},{15:[2,8],17:[2,8],18:[2,8],19:[2,8]},{10:[1,76],21:231},{15:[2,10],17:[2,10],18:[2,10],19:[2,10]},{10:[1,76],21:232},{47:233,50:[2,32],51:[1,217]},{15:[2,58],22:[2,58]},{15:[2,59],22:[2,59]},{15:[2,53],64:[2,53]},{22:[1,234]},{15:[2,51],64:[2,51]},{65:[1,235]},{15:[2,97],22:[2,97],24:[1,123],33:[2,97],64:[2,97],67:[2,97],74:[2,97],75:[2,97],76:[1,122],77:[1,124],78:[1,125],79:[2,97],93:[2,97],94:[2,97],95:[2,97],96:[2,97],97:[2,97],98:[2,97],99:[2,97],100:[2,97],101:[2,97],102:[2,97],105:[2,97]},{15:[2,98],22:[2,98],24:[1,123],33:[2,98],64:[2,98],67:[2,98],74:[2,98],75:[2,98],76:[1,122],77:[1,124],78:[1,125],79:[2,98],93:[2,98],94:[2,98],95:[2,98],96:[2,98],97:[2,98],98:[2,98],99:[2,98],100:[2,98],101:[2,98],102:[2,98],105:[2,98]},{15:[2,99],22:[2,99],24:[1,123],33:[2,99],64:[2,99],67:[2,99],74:[2,99],75:[2,99],76:[1,122],77:[1,124],78:[1,125],79:[2,99],93:[2,99],94:[2,99],95:[2,99],96:[2,99],97:[2,99],98:[2,99],99:[2,99],100:[2,99],101:[2,99],102:[2,99],105:[2,99]},{15:[2,100],22:[2,100],24:[1,123],33:[2,100],64:[2,100],67:[2,100],74:[2,100],75:[2,100],76:[1,122],77:[1,124],78:[1,125],79:[2,100],93:[2,100],94:[2,100],95:[2,100],96:[2,100],97:[2,100],98:[2,100],99:[2,100],100:[2,100],101:[2,100],102:[2,100],105:[2,100]},{15:[2,101],22:[2,101],24:[2,101],33:[2,101],64:[2,101],67:[2,101],74:[2,101],75:[2,101],76:[2,101],77:[2,101],78:[2,101],79:[2,101],93:[2,101],94:[2,101],95:[2,101],96:[2,101],97:[2,101],98:[2,101],99:[2,101],100:[2,101],101:[2,101],102:[2,101],105:[2,101]},{15:[2,102],22:[2,102],24:[2,102],33:[2,102],64:[2,102],67:[2,102],74:[2,102],75:[2,102],76:[2,102],77:[2,102],78:[2,102],79:[2,102],93:[2,102],94:[2,102],95:[2,102],96:[2,102],97:[2,102],98:[2,102],99:[2,102],100:[2,102],101:[2,102],102:[2,102],105:[2,102]},{15:[2,103],22:[2,103],24:[2,103],33:[2,103],64:[2,103],67:[2,103],74:[2,103],75:[2,103],76:[2,103],77:[2,103],78:[2,103],79:[2,103],93:[2,103],94:[2,103],95:[2,103],96:[2,103],97:[2,103],98:[2,103],99:[2,103],100:[2,103],101:[2,103],102:[2,103],105:[2,103]},{15:[2,104],22:[2,104],24:[2,104],33:[2,104],64:[2,104],67:[2,104],74:[2,104],75:[2,104],76:[2,104],77:[2,104],78:[2,104],79:[2,104],93:[2,104],94:[2,104],95:[2,104],96:[2,104],97:[2,104],98:[2,104],99:[2,104],100:[2,104],101:[2,104],102:[2,104],105:[2,104]},{15:[2,105],22:[2,105],24:[1,123],33:[2,105],64:[2,105],67:[2,105],74:[2,105],75:[2,105],76:[1,122],77:[1,124],78:[1,125],79:[2,105],93:[2,105],94:[2,105],95:[2,105],96:[2,105],97:[2,105],98:[2,105],99:[2,105],100:[2,105],101:[2,105],102:[2,105],105:[2,105]},{15:[2,106],22:[2,106],24:[1,123],33:[2,106],64:[2,106],67:[2,106],74:[2,106],75:[2,106],76:[1,122],77:[1,124],78:[1,125],79:[2,106],93:[2,106],94:[2,106],95:[2,106],96:[2,106],97:[2,106],98:[2,106],99:[2,106],100:[2,106],101:[2,106],102:[2,106],105:[2,106]},{15:[2,107],22:[2,107],24:[1,123],33:[2,107],64:[2,107],67:[2,107],74:[2,107],75:[2,107],76:[1,122],77:[1,124],78:[1,125],79:[2,107],93:[2,107],94:[2,107],95:[2,107],96:[2,107],97:[2,107],98:[2,107],99:[2,107],100:[2,107],101:[2,107],102:[2,107],105:[2,107]},{15:[2,108],22:[2,108],24:[1,123],33:[2,108],64:[2,108],67:[2,108],74:[2,108],75:[2,108],76:[1,122],77:[1,124],78:[1,125],79:[2,108],93:[2,108],94:[2,108],95:[2,108],96:[2,108],97:[2,108],98:[2,108],99:[2,108],100:[2,108],101:[2,108],102:[2,108],105:[2,108]},{15:[2,109],22:[2,109],24:[1,123],33:[2,109],64:[2,109],67:[2,109],74:[2,109],75:[2,109],76:[1,122],77:[1,124],78:[1,125],79:[2,109],93:[2,109],94:[2,109],95:[2,109],96:[2,109],97:[2,109],98:[2,109],99:[2,109],100:[2,109],101:[2,109],102:[2,109],105:[2,109]},{15:[2,110],22:[2,110],24:[1,123],33:[2,110],64:[2,110],67:[2,110],74:[2,110],75:[2,110],76:[1,122],77:[1,124],78:[1,125],79:[2,110],93:[2,110],94:[2,110],95:[2,110],96:[2,110],97:[2,110],98:[2,110],99:[2,110],100:[2,110],101:[2,110],102:[2,110],105:[2,110]},{15:[2,111],22:[2,111],24:[1,123],33:[2,111],64:[2,111],67:[2,111],74:[2,111],75:[2,111],76:[1,122],77:[1,124],78:[1,125],79:[2,111],93:[2,111],94:[2,111],95:[2,111],96:[2,111],97:[2,111],98:[2,111],99:[2,111],100:[2,111],101:[2,111],102:[2,111],105:[2,111]},{15:[2,112],22:[2,112],24:[1,123],33:[2,112],64:[2,112],67:[2,112],74:[2,112],75:[2,112],76:[1,122],77:[1,124],78:[1,125],79:[2,112],93:[2,112],94:[2,112],95:[2,112],96:[2,112],97:[2,112],98:[2,112],99:[2,112],100:[2,112],101:[2,112],102:[2,112],105:[2,112]},{15:[2,113],22:[2,113],24:[1,123],33:[2,113],64:[2,113],67:[2,113],74:[2,113],75:[2,113],76:[1,122],77:[1,124],78:[1,125],79:[2,113],93:[2,113],94:[2,113],95:[2,113],96:[2,113],97:[2,113],98:[2,113],99:[2,113],100:[2,113],101:[2,113],102:[2,113],105:[2,113]},{15:[2,114],22:[2,114],24:[1,123],33:[2,114],64:[2,114],67:[2,114],74:[2,114],75:[2,114],76:[1,122],77:[1,124],78:[1,125],79:[2,114],93:[2,114],94:[2,114],95:[2,114],96:[2,114],97:[2,114],98:[2,114],99:[2,114],100:[2,114],101:[2,114],102:[2,114],105:[2,114]},{15:[2,115],22:[2,115],24:[1,123],33:[2,115],64:[2,115],67:[2,115],74:[2,115],75:[2,115],76:[1,122],77:[1,124],78:[1,125],79:[2,115],93:[2,115],94:[2,115],95:[2,115],96:[2,115],97:[2,115],98:[2,115],99:[2,115],100:[2,115],101:[2,115],102:[2,115],105:[2,115]},{22:[1,236]},{22:[1,237]},{15:[2,82],22:[2,82],24:[2,82],33:[2,82],64:[2,82],67:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],93:[2,82],94:[2,82],95:[2,82],96:[2,82],97:[2,82],98:[2,82],99:[2,82],100:[2,82],101:[2,82],102:[2,82],104:[2,82],105:[2,82]},{15:[2,81],22:[2,81],24:[2,81],33:[2,81],34:[1,140],64:[2,81],67:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81],78:[2,81],79:[2,81],93:[2,81],94:[2,81],95:[2,81],96:[2,81],97:[2,81],98:[2,81],99:[2,81],100:[2,81],101:[2,81],102:[2,81],104:[2,81],105:[2,81]},{24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136],105:[1,238]},{15:[2,123],22:[2,123],24:[2,123],33:[2,123],64:[2,123],67:[2,123],74:[2,123],75:[2,123],76:[2,123],77:[2,123],78:[2,123],79:[2,123],93:[2,123],94:[2,123],95:[2,123],96:[2,123],97:[2,123],98:[2,123],99:[2,123],100:[2,123],101:[2,123],102:[2,123],105:[2,123]},{10:[1,85],20:[1,88],22:[2,94],31:143,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,92:239,103:[1,83],104:[1,87],105:[2,94]},{15:[2,126],22:[2,126],24:[2,126],33:[2,126],64:[2,126],67:[2,126],74:[2,126],75:[2,126],76:[2,126],77:[2,126],78:[2,126],79:[2,126],93:[2,126],94:[2,126],95:[2,126],96:[2,126],97:[2,126],98:[2,126],99:[2,126],100:[2,126],101:[2,126],102:[2,126],105:[2,126]},{15:[2,83],22:[2,83],24:[2,83],33:[2,83],64:[2,83],67:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83],79:[2,83],93:[2,83],94:[2,83],95:[2,83],96:[2,83],97:[2,83],98:[2,83],99:[2,83],100:[2,83],101:[2,83],102:[2,83],104:[2,83],105:[2,83]},{15:[2,84],22:[2,84],24:[2,84],33:[2,84],64:[2,84],67:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84],79:[2,84],93:[2,84],94:[2,84],95:[2,84],96:[2,84],97:[2,84],98:[2,84],99:[2,84],100:[2,84],101:[2,84],102:[2,84],104:[2,84],105:[2,84]},{10:[1,240],65:[1,241]},{15:[2,89],22:[2,89],24:[2,89],33:[2,89],64:[2,89],67:[2,89],74:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89],79:[2,89],93:[2,89],94:[2,89],95:[2,89],96:[2,89],97:[2,89],98:[2,89],99:[2,89],100:[2,89],101:[2,89],102:[2,89],104:[2,89],105:[2,89]},{15:[1,242]},{43:[2,134],51:[2,134]},{105:[1,243]},{105:[1,244]},{105:[1,245]},{43:[2,135],51:[2,135]},{43:[2,136],51:[2,136]},{47:246,48:[2,32],51:[1,217]},{48:[1,247]},{10:[1,39],52:248,106:38},{48:[2,15],51:[2,15]},{10:[1,220],27:249,28:219,32:[1,221],48:[2,16],51:[2,16]},{11:[1,250]},{33:[1,251]},{10:[1,76],21:252},{12:253,104:[1,62]},{104:[2,3]},{104:[2,4]},{9:[2,44],10:[2,44],26:[2,44],48:[2,44],51:[2,44],53:[2,44]},{15:[1,254]},{13:[1,255]},{13:[1,256]},{13:[1,257]},{22:[1,258]},{22:[1,259]},{50:[1,260]},{15:[2,50],64:[2,50]},{22:[2,54]},{15:[2,118],22:[2,118],24:[2,118],33:[2,118],34:[1,261],64:[2,118],67:[2,118],74:[2,118],75:[2,118],76:[2,118],77:[2,118],78:[2,118],79:[2,118],93:[2,118],94:[2,118],95:[2,118],96:[2,118],97:[2,118],98:[2,118],99:[2,118],100:[2,118],101:[2,118],102:[2,118],105:[2,118]},{15:[2,120],22:[2,120],24:[2,120],33:[2,120],34:[1,262],64:[2,120],67:[2,120],74:[2,120],75:[2,120],76:[2,120],77:[2,120],78:[2,120],79:[2,120],93:[2,120],94:[2,120],95:[2,120],96:[2,120],97:[2,120],98:[2,120],99:[2,120],100:[2,120],101:[2,120],102:[2,120],105:[2,120]},{15:[2,124],22:[2,124],24:[2,124],33:[2,124],34:[1,263],64:[2,124],67:[2,124],74:[2,124],75:[2,124],76:[2,124],77:[2,124],78:[2,124],79:[2,124],93:[2,124],94:[2,124],95:[2,124],96:[2,124],97:[2,124],98:[2,124],99:[2,124],100:[2,124],101:[2,124],102:[2,124],105:[2,124]},{22:[2,96],105:[2,96]},{34:[1,265],65:[1,264]},{15:[2,88],22:[2,88],24:[2,88],33:[2,88],64:[2,88],67:[2,88],74:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88],79:[2,88],93:[2,88],94:[2,88],95:[2,88],96:[2,88],97:[2,88],98:[2,88],99:[2,88],100:[2,88],101:[2,88],102:[2,88],104:[2,88],105:[2,88]},{43:[2,133],51:[2,133]},{13:[2,130]},{13:[2,131]},{13:[2,132]},{48:[1,266]},{15:[1,267]},{48:[2,33],50:[2,33]},{48:[2,17],51:[2,17]},{7:[1,164],10:[1,162],29:268,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{10:[1,269]},{15:[1,270]},{13:[1,271]},{9:[2,45],10:[2,45],26:[2,45],48:[2,45],51:[2,45],53:[2,45]},{7:[1,164],10:[1,162],29:272,53:[1,273],56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{7:[1,164],10:[1,162],29:274,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{7:[1,164],10:[1,162],29:275,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{22:[1,276]},{22:[1,277],24:[1,278]},{15:[1,279]},{10:[1,199],32:[1,95],65:[1,96],89:280},{10:[1,199],32:[1,95],65:[1,96],89:281},{10:[1,199],32:[1,95],65:[1,96],89:282},{15:[2,86],22:[2,86],24:[2,86],33:[2,86],64:[2,86],67:[2,86],74:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86],79:[2,86],93:[2,86],94:[2,86],95:[2,86],96:[2,86],97:[2,86],98:[2,86],99:[2,86],100:[2,86],101:[2,86],102:[2,86],104:[2,86],105:[2,86]},{65:[1,283]},{15:[1,284]},{1:[2,30],36:[2,30],37:[2,30],38:[2,30],41:[2,30],44:[2,30],49:[2,30]},{30:[1,285]},{11:[1,286],34:[1,287]},{26:[2,35],48:[2,35],51:[2,35]},{10:[1,288]},{15:[2,40],30:[2,40]},{7:[1,164],10:[1,162],29:289,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{15:[2,42],30:[2,42]},{15:[2,43],30:[2,43]},{15:[2,9],17:[2,9],18:[2,9],19:[2,9]},{15:[2,11],17:[2,11],18:[2,11],19:[2,11]},{10:[1,290],23:[1,291]},{1:[2,31],36:[2,31],37:[2,31],38:[2,31],41:[2,31],44:[2,31],49:[2,31]},{15:[2,119],22:[2,119],24:[2,119],33:[2,119],64:[2,119],67:[2,119],74:[2,119],75:[2,119],76:[2,119],77:[2,119],78:[2,119],79:[2,119],93:[2,119],94:[2,119],95:[2,119],96:[2,119],97:[2,119],98:[2,119],99:[2,119],100:[2,119],101:[2,119],102:[2,119],105:[2,119]},{15:[2,121],22:[2,121],24:[2,121],33:[2,121],64:[2,121],67:[2,121],74:[2,121],75:[2,121],76:[2,121],77:[2,121],78:[2,121],79:[2,121],93:[2,121],94:[2,121],95:[2,121],96:[2,121],97:[2,121],98:[2,121],99:[2,121],100:[2,121],101:[2,121],102:[2,121],105:[2,121]},{15:[2,125],22:[2,125],24:[2,125],33:[2,125],64:[2,125],67:[2,125],74:[2,125],75:[2,125],76:[2,125],77:[2,125],78:[2,125],79:[2,125],93:[2,125],94:[2,125],95:[2,125],96:[2,125],97:[2,125],98:[2,125],99:[2,125],100:[2,125],101:[2,125],102:[2,125],105:[2,125]},{15:[2,87],22:[2,87],24:[2,87],33:[2,87],64:[2,87],67:[2,87],74:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87],79:[2,87],93:[2,87],94:[2,87],95:[2,87],96:[2,87],97:[2,87],98:[2,87],99:[2,87],100:[2,87],101:[2,87],102:[2,87],104:[2,87],105:[2,87]},{1:[2,29],36:[2,29],37:[2,29],38:[2,29],41:[2,29],44:[2,29],49:[2,29]},{10:[1,85],20:[1,88],31:292,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{7:[1,164],10:[1,162],29:293,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{10:[1,294]},{14:[1,295]},{15:[2,41],30:[2,41]},{22:[1,296]},{20:[1,297]},{15:[1,298],24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136]},{30:[1,299]},{11:[1,300]},{10:[1,301]},{15:[2,12],17:[2,12],18:[2,12],19:[2,12]},{10:[1,76],21:302},{10:[2,18],32:[2,18],48:[2,18],51:[2,18]},{10:[1,85],20:[1,88],31:303,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{7:[1,164],10:[1,162],29:304,56:161,57:[1,163],58:[1,165],68:[1,46],69:[1,47],70:[1,48],71:[1,49],72:[1,50]},{15:[1,305]},{22:[1,306]},{15:[1,307],24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136]},{30:[1,308]},{26:[2,6],48:[2,6],51:[2,6],53:[2,6]},{22:[1,309]},{10:[2,19],32:[2,19],48:[2,19],51:[2,19]},{10:[1,85],20:[1,88],31:310,32:[1,95],65:[1,96],70:[1,82],80:84,81:[1,89],82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],89:86,103:[1,83],104:[1,87]},{15:[2,13],17:[2,13],18:[2,13],19:[2,13]},{15:[1,311],24:[1,123],33:[1,134],64:[1,128],74:[1,118],75:[1,119],76:[1,122],77:[1,124],78:[1,125],79:[1,126],93:[1,120],94:[1,121],95:[1,127],96:[1,129],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,135],102:[1,136]},{10:[2,20],32:[2,20],48:[2,20],51:[2,20]}],
defaultActions: {9:[2,2],22:[2,49],37:[2,140],72:[2,24],89:[2,71],90:[2,72],91:[2,73],92:[2,74],93:[2,75],94:[2,76],224:[2,3],225:[2,4],235:[2,54],243:[2,130],244:[2,131],245:[2,132]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore multiline comment */ ;
break;
case 2:/* ignore end of line comment */;
break;
case 3:/* ignore functions */
break;
case 4:return 17;
break;
case 5:return 24;
break;
case 6:return 76;
break;
case 7:return 58;
break;
case 8:return 6;
break;
case 9:return 77;
break;
case 10:return 38;
break;
case 11:return 26;
break;
case 12:return 40;
break;
case 13:return 48;
break;
case 14:return 50;
break;
case 15:return 43;
break;
case 16:return 37;
break;
case 17:return 44;
break;
case 18:return 109;
break;
case 19:return 81;
break;
case 20:return 14;
break;
case 21:return 69;
break;
case 22:return 9;
break;
case 23:return 78;
break;
case 24:return 57;
break;
case 25:return 72;
break;
case 26:return 70;
break;
case 27:return 103;
break;
case 28:return 85;
break;
case 29:return 13;
break;
case 30:return 23;
break;
case 31:return 55;
break;
case 32:return 82;
break;
case 33:return 68;
break;
case 34:return 49;
break;
case 35:return 36;
break;
case 36:return 110;
break;
case 37:return 32;
break;
case 38:return 7;
break;
case 39:return 71;
break;
case 40:return 83;
break;
case 41:return 19;
break;
case 42:return 18;
break;
case 43:return 84;
break;
case 44:return 41;
break;
case 45:return 53;
break;
case 46:return 86;
break;
case 47:return 51;
break;
case 48:return 10;
break;
case 49:return 70;
break;
case 50:return 101;
break;
case 51:return 107;
break;
case 52:return 102;
break;
case 53:return 30;
break;
case 54:return 100;
break;
case 55:return 15;
break;
case 56:return 11;
break;
case 57:return 22;
break;
case 58:return 20;
break;
case 59:return 64;
break;
case 60:return "'";
break;
case 61:return 67;
break;
case 62:return 74;
break;
case 63:return 75;
break;
case 64:return 96;
break;
case 65:return 79;
break;
case 66:return 93;
break;
case 67:return 94;
break;
case 68:return 105;
break;
case 69:return 104;
break;
case 70:return 34;
break;
case 71:return 95;
break;
case 72:return 97;
break;
case 73:return 99;
break;
case 74:return 98;
break;
case 75:return 33;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\(\*(.|\n|\r)*\*\))/,/^(?:--.*)/,/^(?:FUNCTION(.|\n|\r)*END_FUNCTION;)/,/^(?:ABSTRACT\b)/,/^(?:ANDOR\b)/,/^(?:AND\b)/,/^(?:ARRAY\b)/,/^(?:BAG\b)/,/^(?:OR\b)/,/^(?:CONSTANT\b)/,/^(?:DERIVE\b)/,/^(?:END_CONSTANT\b)/,/^(?:END_ENTITY\b)/,/^(?:END_RULE\b)/,/^(?:END_TYPE\b)/,/^(?:END_SCHEMA\b)/,/^(?:ENTITY\b)/,/^(?:ENUMERATION\b)/,/^(?:EXISTS\b)/,/^(?:FOR\b)/,/^(?:INTEGER\b)/,/^(?:INVERSE\b)/,/^(?:IN\b)/,/^(?:LIST\b)/,/^(?:LOGICAL\b)/,/^(?:NUMBER\b)/,/^(?:NOT\b)/,/^(?:NVL\b)/,/^(?:OF\b)/,/^(?:ONEOF\b)/,/^(?:OPTIONAL\b)/,/^(?:QUERY\b)/,/^(?:REAL\b)/,/^(?:RULE\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SELF\b)/,/^(?:SET\b)/,/^(?:STRING\b)/,/^(?:SIZEOF\b)/,/^(?:SUBTYPE\b)/,/^(?:SUPERTYPE\b)/,/^(?:TYPEOF\b)/,/^(?:TYPE\b)/,/^(?:UNIQUE\b)/,/^(?:USEDIN\b)/,/^(?:WHERE\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?::<>:)/,/^(?:\?)/,/^(?::=:)/,/^(?::=)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\))/,/^(?:\()/,/^(?:\|\|)/,/^(?:')/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<\*)/,/^(?:<)/,/^(?:>)/,/^(?:\])/,/^(?:\[)/,/^(?:\.)/,/^(?:\|)/,/^(?:\*)/,/^(?:-)/,/^(?:\+)/,/^(?:\\)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = express_parser;
exports.Parser = express_parser.Parser;
exports.parse = function () { return express_parser.parse.apply(express_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}