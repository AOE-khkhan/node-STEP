/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var express_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"expression":4,"EOF":5,"bag_or_set":6,"BAG":7,"SET":8,"optional_inverse":9,"INVERSE":10,"identifier":11,":":12,"range":13,"OF":14,"FOR":15,";":16,"optional_abstract_el":17,"ABSTRACT":18,"SUPERTYPE":19,"SUBTYPE":20,"(":21,"list_id":22,")":23,"ONEOF":24,"ANDOR":25,"optional_derive":26,"DERIVE":27,"list_der":28,"list_der_item":29,"composite_type":30,":=":31,"expr2":32,"SELF":33,"\\\\":34,".":35,"optional_abstract":36,"SCHEMA":37,"END_SCHEMA":38,"CONSTANT":39,"constants":40,"END_CONSTANT":41,"TYPE":42,"type":43,"END_TYPE":44,"ENTITY":45,"entity_description":46,"optional_unique":47,"optional_where_rules":48,"END_ENTITY":49,"RULE":50,"END_RULE":51,"WHERE":52,"rules":53,"UNIQUE":54,"optional_OPTIONAL":55,"OPTIONAL":56,"basic_type":57,"LIST":58,"ARRAY":59,"entity_prop":60,"constant":61,"stuff":62,"string":63,"expr":64,"||":65,"'":66,"constant_b":67,",":68,"REAL":69,"INTEGER":70,"NUMBER":71,"STRING":72,"LOGICAL":73,"op":74,"<=":75,">=":76,"AND":77,"OR":78,"IN":79,"<*":80,"function":81,"EXISTS":82,"QUERY":83,"SIZEOF":84,"TYPEOF":85,"NVL":86,"USEDIN":87,"list_item":88,"list":89,"id2":90,"\\":91,"variable":92,"list_arguments":93,"<":94,">":95,"|":96,"<>":97,"*":98,"+":99,"-":100,"=":101,":<>:":102,":=:":103,"NOT":104,"[":105,"]":106,"rule":107,"?":108,"type_declaration":109,"ENUMERATION":110,"SELECT":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BAG",8:"SET",10:"INVERSE",11:"identifier",12:":",14:"OF",15:"FOR",16:";",18:"ABSTRACT",19:"SUPERTYPE",20:"SUBTYPE",21:"(",23:")",24:"ONEOF",25:"ANDOR",27:"DERIVE",31:":=",33:"SELF",34:"\\\\",35:".",37:"SCHEMA",38:"END_SCHEMA",39:"CONSTANT",41:"END_CONSTANT",42:"TYPE",44:"END_TYPE",45:"ENTITY",49:"END_ENTITY",50:"RULE",51:"END_RULE",52:"WHERE",54:"UNIQUE",56:"OPTIONAL",58:"LIST",59:"ARRAY",65:"||",66:"'",68:",",69:"REAL",70:"INTEGER",71:"NUMBER",72:"STRING",73:"LOGICAL",75:"<=",76:">=",77:"AND",78:"OR",79:"IN",80:"<*",82:"EXISTS",83:"QUERY",84:"SIZEOF",85:"TYPEOF",86:"NVL",87:"USEDIN",91:"\\",94:"<",95:">",96:"|",97:"<>",98:"*",99:"+",100:"-",101:"=",102:":<>:",103:":=:",104:"NOT",105:"[",106:"]",108:"?",110:"ENUMERATION",111:"SELECT"},
productions_: [0,[3,1],[3,2],[3,2],[6,1],[6,1],[9,0],[9,10],[17,2],[17,5],[17,8],[17,5],[17,8],[17,10],[17,13],[26,0],[26,2],[28,1],[28,2],[29,6],[29,8],[29,10],[36,0],[36,1],[36,2],[36,3],[4,3],[4,2],[4,4],[4,4],[4,11],[4,10],[4,10],[48,0],[48,2],[47,0],[47,5],[55,0],[55,1],[30,1],[30,1],[30,4],[30,5],[30,4],[30,4],[60,4],[60,5],[46,1],[46,2],[40,1],[40,2],[62,4],[62,3],[64,1],[64,3],[63,2],[67,4],[61,3],[22,1],[22,3],[22,3],[57,1],[57,1],[57,1],[57,1],[57,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[88,5],[88,1],[89,1],[89,3],[90,1],[90,3],[90,3],[90,3],[90,1],[90,5],[90,6],[90,4],[90,3],[90,2],[92,1],[92,1],[92,5],[93,0],[93,1],[93,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,2],[32,4],[32,6],[32,4],[32,6],[32,1],[32,3],[32,4],[32,6],[32,3],[107,3],[53,2],[53,3],[13,5],[13,5],[13,5],[109,8],[109,7],[109,7],[109,7],[109,4],[109,4],[43,1],[43,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 26:

        
break;
case 30:
                        // console.log(" ENTITY-A" , $$[$0-9]);
                        var name =  $$[$0-9];
                        yy.grammar[name] = {
                            type: "entity",
                            entity: name,
                            // props:  yy.props,
                         };
                
break;
case 31:
                        // console.log(" ENTITY-B" , $$[$0-8]);
                        var name =  $$[$0-8] ;
                        yy.grammar[name] = {
                            type: "entity",
                            entity: name,
                            // props:  yy.props,
                        };
                
break;
case 58:
               this.$ = [ $$[$0] ];
            
break;
case 59:
              this.$ = [ $$[$0-2] , $$[$0-1] ]
            
break;
case 60:
              this.$ = $$[$0]
              $$[$0].unshift($$[$0-2]);
           
break;
case 131:
                    
break;
case 134:
                         var name = $$[$0-7];
                         var list = $$[$0-2];
                         yy.grammar[name] = {
                            type: "enumeration",
                            enum: $$[$0-2]
                         };
                     
break;
}
},
table: [{3:1,4:2,37:[1,3],38:[1,4],39:[1,5],42:[1,6],45:[1,7],50:[1,8]},{1:[3],4:9,5:[1,10],37:[1,3],38:[1,4],39:[1,5],42:[1,6],45:[1,7],50:[1,8]},{1:[2,1],5:[2,1],37:[2,1],38:[2,1],39:[2,1],42:[2,1],45:[2,1],50:[2,1]},{11:[1,11]},{16:[1,12]},{11:[1,15],40:13,61:14},{11:[1,18],43:16,109:17},{11:[1,19]},{11:[1,20]},{1:[2,2],5:[2,2],37:[2,2],38:[2,2],39:[2,2],42:[2,2],45:[2,2],50:[2,2]},{1:[2,3],5:[2,3],37:[2,3],38:[2,3],39:[2,3],42:[2,3],45:[2,3],50:[2,3]},{16:[1,21]},{1:[2,27],5:[2,27],37:[2,27],38:[2,27],39:[2,27],42:[2,27],45:[2,27],50:[2,27]},{41:[1,22]},{11:[1,15],40:23,41:[2,49],61:14},{12:[1,24]},{44:[1,25]},{44:[2,140],52:[1,26]},{101:[1,27]},{16:[2,22],17:29,18:[1,30],19:[1,32],20:[1,31],36:28},{15:[1,33]},{1:[2,26],5:[2,26],37:[2,26],38:[2,26],39:[2,26],42:[2,26],45:[2,26],50:[2,26]},{16:[1,34]},{41:[2,50]},{11:[1,36],67:35},{16:[1,37]},{11:[1,40],53:38,107:39},{8:[1,43],11:[1,46],57:45,58:[1,42],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51],110:[1,41],111:[1,44]},{16:[1,52]},{16:[2,23],17:53,18:[1,30],19:[1,32],20:[1,31]},{19:[1,54]},{14:[1,55]},{14:[1,56]},{21:[1,57]},{1:[2,28],5:[2,28],37:[2,28],38:[2,28],39:[2,28],42:[2,28],45:[2,28],50:[2,28]},{11:[2,57],41:[2,57]},{31:[1,58]},{1:[2,29],5:[2,29],37:[2,29],38:[2,29],39:[2,29],42:[2,29],45:[2,29],50:[2,29]},{44:[2,141]},{16:[1,59]},{12:[1,60]},{14:[1,61]},{13:62,105:[1,63]},{13:64,105:[1,63]},{21:[1,65]},{16:[1,66]},{16:[1,67]},{16:[2,61],31:[2,61]},{16:[2,62],31:[2,62]},{16:[2,63],31:[2,63]},{16:[2,64],31:[2,64]},{16:[2,65],31:[2,65]},{9:69,10:[1,71],11:[1,72],27:[2,6],46:68,49:[2,6],52:[2,6],54:[2,6],60:70},{16:[2,24],17:73,18:[1,30],19:[1,32],20:[1,31]},{16:[2,8],18:[2,8],19:[2,8],20:[2,8]},{21:[1,74]},{21:[1,75]},{11:[1,77],22:76},{11:[1,80],62:79,64:78},{11:[1,40],44:[2,129],49:[2,129],51:[2,129],53:81,107:39},{11:[1,86],21:[1,89],32:82,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{21:[1,98]},{14:[1,99]},{71:[1,100]},{14:[1,101]},{11:[1,77],22:102},{44:[2,138],52:[2,138]},{44:[2,139],52:[2,139]},{9:103,10:[1,71],27:[2,6],49:[2,6],52:[2,6],54:[2,6]},{27:[2,35],47:104,49:[2,35],52:[2,35],54:[1,105]},{10:[2,47],11:[1,72],27:[2,47],46:106,49:[2,47],52:[2,47],54:[2,47],60:70},{11:[1,107]},{12:[1,108]},{16:[2,25]},{11:[1,77],22:109,24:[1,110]},{11:[1,77],22:111,24:[1,112]},{23:[1,113]},{16:[2,58],23:[2,58],25:[1,114],68:[1,115]},{16:[1,116],65:[1,117]},{16:[2,53],65:[2,53]},{21:[1,118]},{44:[2,130],49:[2,130],51:[2,130]},{16:[2,128],25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137]},{16:[2,117],23:[2,117],25:[2,117],34:[2,117],65:[2,117],68:[2,117],75:[2,117],76:[2,117],77:[2,117],78:[2,117],79:[2,117],80:[2,117],94:[2,117],95:[2,117],96:[2,117],97:[2,117],98:[2,117],99:[2,117],100:[2,117],101:[2,117],102:[2,117],103:[2,117],106:[2,117]},{11:[1,86],21:[1,89],32:138,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{21:[1,139]},{16:[2,82],21:[1,140],23:[2,82],25:[2,82],34:[2,82],35:[1,141],65:[2,82],68:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],80:[2,82],94:[2,82],95:[2,82],96:[2,82],97:[2,82],98:[2,82],99:[2,82],100:[2,82],101:[2,82],102:[2,82],103:[2,82],105:[2,82],106:[2,82]},{16:[2,123],23:[2,123],25:[2,123],34:[2,123],65:[2,123],68:[2,123],75:[2,123],76:[2,123],77:[2,123],78:[2,123],79:[2,123],80:[2,123],94:[2,123],95:[2,123],96:[2,123],97:[2,123],98:[2,123],99:[2,123],100:[2,123],101:[2,123],102:[2,123],103:[2,123],105:[1,142],106:[2,123]},{11:[1,86],21:[1,89],32:144,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,93:143,104:[1,84],105:[1,88],106:[2,95]},{11:[1,86],21:[1,89],32:145,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{21:[2,72]},{21:[2,73]},{21:[2,74]},{21:[2,75]},{21:[2,76]},{21:[2,77]},{16:[2,86],23:[2,86],25:[2,86],34:[2,86],35:[1,146],65:[2,86],68:[2,86],75:[2,86],76:[2,86],77:[2,86],78:[2,86],79:[2,86],80:[2,86],91:[1,147],94:[2,86],95:[2,86],96:[2,86],97:[2,86],98:[2,86],99:[2,86],100:[2,86],101:[2,86],102:[2,86],103:[2,86],105:[2,86],106:[2,86]},{11:[1,148],66:[1,149]},{11:[1,77],22:150},{11:[1,151]},{12:[1,152]},{11:[1,153]},{23:[1,154]},{27:[2,35],47:155,49:[2,35],52:[2,35],54:[1,105]},{26:156,27:[1,157],49:[2,15],52:[2,15]},{11:[1,158]},{10:[2,48],27:[2,48],49:[2,48],52:[2,48],54:[2,48]},{12:[1,159]},{8:[1,165],11:[1,163],30:160,56:[1,161],57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{23:[1,167]},{21:[1,168]},{23:[1,169]},{21:[1,170]},{16:[1,171]},{11:[1,172]},{11:[1,77],22:173},{11:[2,56],41:[2,56]},{11:[1,80],62:174},{23:[1,176],63:175,66:[1,177]},{11:[1,86],21:[1,89],32:178,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:179,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:180,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:181,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:182,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:183,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:184,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:185,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:186,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:187,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:188,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:189,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:190,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:191,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:192,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:193,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:194,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:195,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],32:196,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{16:[2,118],23:[2,118],25:[2,118],34:[2,118],65:[2,118],68:[2,118],75:[2,118],76:[2,118],77:[2,118],78:[2,118],79:[2,118],80:[2,118],94:[2,118],95:[2,118],96:[2,118],97:[2,118],98:[2,118],99:[2,118],100:[2,118],101:[2,118],102:[2,118],103:[2,118],106:[2,118]},{11:[1,86],21:[1,89],23:[2,95],32:144,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,93:197,104:[1,84],105:[1,88]},{11:[1,86],21:[1,89],23:[2,95],32:144,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,93:198,104:[1,84],105:[1,88]},{11:[1,200],33:[1,96],66:[1,97],90:199},{11:[1,86],21:[1,89],32:201,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{106:[1,202]},{23:[2,96],25:[1,124],34:[1,135],65:[1,129],68:[1,203],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137],106:[2,96]},{23:[1,204],25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137]},{11:[1,200],33:[1,96],66:[1,97],90:205},{11:[1,200],33:[1,96],66:[1,97],90:206},{35:[1,207],66:[1,208]},{16:[2,91],23:[2,91],25:[2,91],34:[2,91],65:[2,91],68:[2,91],75:[2,91],76:[2,91],77:[2,91],78:[2,91],79:[2,91],80:[2,91],94:[2,91],95:[2,91],96:[2,91],97:[2,91],98:[2,91],99:[2,91],100:[2,91],101:[2,91],102:[2,91],103:[2,91],105:[2,91],106:[2,91]},{23:[1,209]},{16:[1,210]},{11:[1,213],71:[1,212],108:[1,211]},{16:[1,214]},{16:[1,215]},{26:216,27:[1,157],49:[2,15],52:[2,15]},{48:217,49:[2,33],52:[1,218]},{11:[1,221],28:219,29:220,33:[1,222]},{12:[1,223]},{6:224,7:[1,225],8:[1,226]},{16:[1,227]},{8:[1,165],11:[1,163],30:228,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{16:[2,39],31:[2,39]},{16:[2,40],31:[2,40]},{13:229,105:[1,63]},{13:230,105:[1,63]},{13:231,105:[1,63]},{16:[2,9],18:[2,9],19:[2,9],20:[2,9]},{11:[1,77],22:232},{16:[2,11],18:[2,11],19:[2,11],20:[2,11]},{11:[1,77],22:233},{48:234,51:[2,33],52:[1,218]},{16:[2,59],23:[2,59]},{16:[2,60],23:[2,60]},{16:[2,54],65:[2,54]},{23:[1,235]},{16:[2,52],65:[2,52]},{66:[1,236]},{16:[2,98],23:[2,98],25:[1,124],34:[2,98],65:[2,98],68:[2,98],75:[2,98],76:[2,98],77:[1,123],78:[1,125],79:[1,126],80:[2,98],94:[2,98],95:[2,98],96:[2,98],97:[2,98],98:[2,98],99:[2,98],100:[2,98],101:[2,98],102:[2,98],103:[2,98],106:[2,98]},{16:[2,99],23:[2,99],25:[1,124],34:[2,99],65:[2,99],68:[2,99],75:[2,99],76:[2,99],77:[1,123],78:[1,125],79:[1,126],80:[2,99],94:[2,99],95:[2,99],96:[2,99],97:[2,99],98:[2,99],99:[2,99],100:[2,99],101:[2,99],102:[2,99],103:[2,99],106:[2,99]},{16:[2,100],23:[2,100],25:[1,124],34:[2,100],65:[2,100],68:[2,100],75:[2,100],76:[2,100],77:[1,123],78:[1,125],79:[1,126],80:[2,100],94:[2,100],95:[2,100],96:[2,100],97:[2,100],98:[2,100],99:[2,100],100:[2,100],101:[2,100],102:[2,100],103:[2,100],106:[2,100]},{16:[2,101],23:[2,101],25:[1,124],34:[2,101],65:[2,101],68:[2,101],75:[2,101],76:[2,101],77:[1,123],78:[1,125],79:[1,126],80:[2,101],94:[2,101],95:[2,101],96:[2,101],97:[2,101],98:[2,101],99:[2,101],100:[2,101],101:[2,101],102:[2,101],103:[2,101],106:[2,101]},{16:[2,102],23:[2,102],25:[2,102],34:[2,102],65:[2,102],68:[2,102],75:[2,102],76:[2,102],77:[2,102],78:[2,102],79:[2,102],80:[2,102],94:[2,102],95:[2,102],96:[2,102],97:[2,102],98:[2,102],99:[2,102],100:[2,102],101:[2,102],102:[2,102],103:[2,102],106:[2,102]},{16:[2,103],23:[2,103],25:[2,103],34:[2,103],65:[2,103],68:[2,103],75:[2,103],76:[2,103],77:[2,103],78:[2,103],79:[2,103],80:[2,103],94:[2,103],95:[2,103],96:[2,103],97:[2,103],98:[2,103],99:[2,103],100:[2,103],101:[2,103],102:[2,103],103:[2,103],106:[2,103]},{16:[2,104],23:[2,104],25:[2,104],34:[2,104],65:[2,104],68:[2,104],75:[2,104],76:[2,104],77:[2,104],78:[2,104],79:[2,104],80:[2,104],94:[2,104],95:[2,104],96:[2,104],97:[2,104],98:[2,104],99:[2,104],100:[2,104],101:[2,104],102:[2,104],103:[2,104],106:[2,104]},{16:[2,105],23:[2,105],25:[2,105],34:[2,105],65:[2,105],68:[2,105],75:[2,105],76:[2,105],77:[2,105],78:[2,105],79:[2,105],80:[2,105],94:[2,105],95:[2,105],96:[2,105],97:[2,105],98:[2,105],99:[2,105],100:[2,105],101:[2,105],102:[2,105],103:[2,105],106:[2,105]},{16:[2,106],23:[2,106],25:[1,124],34:[2,106],65:[2,106],68:[2,106],75:[2,106],76:[2,106],77:[1,123],78:[1,125],79:[1,126],80:[2,106],94:[2,106],95:[2,106],96:[2,106],97:[2,106],98:[2,106],99:[2,106],100:[2,106],101:[2,106],102:[2,106],103:[2,106],106:[2,106]},{16:[2,107],23:[2,107],25:[1,124],34:[2,107],65:[2,107],68:[2,107],75:[2,107],76:[2,107],77:[1,123],78:[1,125],79:[1,126],80:[2,107],94:[2,107],95:[2,107],96:[2,107],97:[2,107],98:[2,107],99:[2,107],100:[2,107],101:[2,107],102:[2,107],103:[2,107],106:[2,107]},{16:[2,108],23:[2,108],25:[1,124],34:[2,108],65:[2,108],68:[2,108],75:[2,108],76:[2,108],77:[1,123],78:[1,125],79:[1,126],80:[2,108],94:[2,108],95:[2,108],96:[2,108],97:[2,108],98:[2,108],99:[2,108],100:[2,108],101:[2,108],102:[2,108],103:[2,108],106:[2,108]},{16:[2,109],23:[2,109],25:[1,124],34:[2,109],65:[2,109],68:[2,109],75:[2,109],76:[2,109],77:[1,123],78:[1,125],79:[1,126],80:[2,109],94:[2,109],95:[2,109],96:[2,109],97:[2,109],98:[2,109],99:[2,109],100:[2,109],101:[2,109],102:[2,109],103:[2,109],106:[2,109]},{16:[2,110],23:[2,110],25:[1,124],34:[2,110],65:[2,110],68:[2,110],75:[2,110],76:[2,110],77:[1,123],78:[1,125],79:[1,126],80:[2,110],94:[2,110],95:[2,110],96:[2,110],97:[2,110],98:[2,110],99:[2,110],100:[2,110],101:[2,110],102:[2,110],103:[2,110],106:[2,110]},{16:[2,111],23:[2,111],25:[1,124],34:[2,111],65:[2,111],68:[2,111],75:[2,111],76:[2,111],77:[1,123],78:[1,125],79:[1,126],80:[2,111],94:[2,111],95:[2,111],96:[2,111],97:[2,111],98:[2,111],99:[2,111],100:[2,111],101:[2,111],102:[2,111],103:[2,111],106:[2,111]},{16:[2,112],23:[2,112],25:[1,124],34:[2,112],65:[2,112],68:[2,112],75:[2,112],76:[2,112],77:[1,123],78:[1,125],79:[1,126],80:[2,112],94:[2,112],95:[2,112],96:[2,112],97:[2,112],98:[2,112],99:[2,112],100:[2,112],101:[2,112],102:[2,112],103:[2,112],106:[2,112]},{16:[2,113],23:[2,113],25:[1,124],34:[2,113],65:[2,113],68:[2,113],75:[2,113],76:[2,113],77:[1,123],78:[1,125],79:[1,126],80:[2,113],94:[2,113],95:[2,113],96:[2,113],97:[2,113],98:[2,113],99:[2,113],100:[2,113],101:[2,113],102:[2,113],103:[2,113],106:[2,113]},{16:[2,114],23:[2,114],25:[1,124],34:[2,114],65:[2,114],68:[2,114],75:[2,114],76:[2,114],77:[1,123],78:[1,125],79:[1,126],80:[2,114],94:[2,114],95:[2,114],96:[2,114],97:[2,114],98:[2,114],99:[2,114],100:[2,114],101:[2,114],102:[2,114],103:[2,114],106:[2,114]},{16:[2,115],23:[2,115],25:[1,124],34:[2,115],65:[2,115],68:[2,115],75:[2,115],76:[2,115],77:[1,123],78:[1,125],79:[1,126],80:[2,115],94:[2,115],95:[2,115],96:[2,115],97:[2,115],98:[2,115],99:[2,115],100:[2,115],101:[2,115],102:[2,115],103:[2,115],106:[2,115]},{16:[2,116],23:[2,116],25:[1,124],34:[2,116],65:[2,116],68:[2,116],75:[2,116],76:[2,116],77:[1,123],78:[1,125],79:[1,126],80:[2,116],94:[2,116],95:[2,116],96:[2,116],97:[2,116],98:[2,116],99:[2,116],100:[2,116],101:[2,116],102:[2,116],103:[2,116],106:[2,116]},{23:[1,237]},{23:[1,238]},{16:[2,83],23:[2,83],25:[2,83],34:[2,83],65:[2,83],68:[2,83],75:[2,83],76:[2,83],77:[2,83],78:[2,83],79:[2,83],80:[2,83],94:[2,83],95:[2,83],96:[2,83],97:[2,83],98:[2,83],99:[2,83],100:[2,83],101:[2,83],102:[2,83],103:[2,83],105:[2,83],106:[2,83]},{16:[2,82],23:[2,82],25:[2,82],34:[2,82],35:[1,141],65:[2,82],68:[2,82],75:[2,82],76:[2,82],77:[2,82],78:[2,82],79:[2,82],80:[2,82],94:[2,82],95:[2,82],96:[2,82],97:[2,82],98:[2,82],99:[2,82],100:[2,82],101:[2,82],102:[2,82],103:[2,82],105:[2,82],106:[2,82]},{25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137],106:[1,239]},{16:[2,124],23:[2,124],25:[2,124],34:[2,124],65:[2,124],68:[2,124],75:[2,124],76:[2,124],77:[2,124],78:[2,124],79:[2,124],80:[2,124],94:[2,124],95:[2,124],96:[2,124],97:[2,124],98:[2,124],99:[2,124],100:[2,124],101:[2,124],102:[2,124],103:[2,124],106:[2,124]},{11:[1,86],21:[1,89],23:[2,95],32:144,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,93:240,104:[1,84],105:[1,88],106:[2,95]},{16:[2,127],23:[2,127],25:[2,127],34:[2,127],65:[2,127],68:[2,127],75:[2,127],76:[2,127],77:[2,127],78:[2,127],79:[2,127],80:[2,127],94:[2,127],95:[2,127],96:[2,127],97:[2,127],98:[2,127],99:[2,127],100:[2,127],101:[2,127],102:[2,127],103:[2,127],106:[2,127]},{16:[2,84],23:[2,84],25:[2,84],34:[2,84],65:[2,84],68:[2,84],75:[2,84],76:[2,84],77:[2,84],78:[2,84],79:[2,84],80:[2,84],94:[2,84],95:[2,84],96:[2,84],97:[2,84],98:[2,84],99:[2,84],100:[2,84],101:[2,84],102:[2,84],103:[2,84],105:[2,84],106:[2,84]},{16:[2,85],23:[2,85],25:[2,85],34:[2,85],65:[2,85],68:[2,85],75:[2,85],76:[2,85],77:[2,85],78:[2,85],79:[2,85],80:[2,85],94:[2,85],95:[2,85],96:[2,85],97:[2,85],98:[2,85],99:[2,85],100:[2,85],101:[2,85],102:[2,85],103:[2,85],105:[2,85],106:[2,85]},{11:[1,241],66:[1,242]},{16:[2,90],23:[2,90],25:[2,90],34:[2,90],65:[2,90],68:[2,90],75:[2,90],76:[2,90],77:[2,90],78:[2,90],79:[2,90],80:[2,90],94:[2,90],95:[2,90],96:[2,90],97:[2,90],98:[2,90],99:[2,90],100:[2,90],101:[2,90],102:[2,90],103:[2,90],105:[2,90],106:[2,90]},{16:[1,243]},{44:[2,135],52:[2,135]},{106:[1,244]},{106:[1,245]},{106:[1,246]},{44:[2,136],52:[2,136]},{44:[2,137],52:[2,137]},{48:247,49:[2,33],52:[1,218]},{49:[1,248]},{11:[1,40],53:249,107:39},{49:[2,16],52:[2,16]},{11:[1,221],28:250,29:220,33:[1,222],49:[2,17],52:[2,17]},{12:[1,251]},{34:[1,252]},{11:[1,77],22:253},{13:254,105:[1,63]},{105:[2,4]},{105:[2,5]},{10:[2,45],11:[2,45],27:[2,45],49:[2,45],52:[2,45],54:[2,45]},{16:[1,255]},{14:[1,256]},{14:[1,257]},{14:[1,258]},{23:[1,259]},{23:[1,260]},{51:[1,261]},{16:[2,51],65:[2,51]},{23:[2,55]},{16:[2,119],23:[2,119],25:[2,119],34:[2,119],35:[1,262],65:[2,119],68:[2,119],75:[2,119],76:[2,119],77:[2,119],78:[2,119],79:[2,119],80:[2,119],94:[2,119],95:[2,119],96:[2,119],97:[2,119],98:[2,119],99:[2,119],100:[2,119],101:[2,119],102:[2,119],103:[2,119],106:[2,119]},{16:[2,121],23:[2,121],25:[2,121],34:[2,121],35:[1,263],65:[2,121],68:[2,121],75:[2,121],76:[2,121],77:[2,121],78:[2,121],79:[2,121],80:[2,121],94:[2,121],95:[2,121],96:[2,121],97:[2,121],98:[2,121],99:[2,121],100:[2,121],101:[2,121],102:[2,121],103:[2,121],106:[2,121]},{16:[2,125],23:[2,125],25:[2,125],34:[2,125],35:[1,264],65:[2,125],68:[2,125],75:[2,125],76:[2,125],77:[2,125],78:[2,125],79:[2,125],80:[2,125],94:[2,125],95:[2,125],96:[2,125],97:[2,125],98:[2,125],99:[2,125],100:[2,125],101:[2,125],102:[2,125],103:[2,125],106:[2,125]},{23:[2,97],106:[2,97]},{35:[1,266],66:[1,265]},{16:[2,89],23:[2,89],25:[2,89],34:[2,89],65:[2,89],68:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89],79:[2,89],80:[2,89],94:[2,89],95:[2,89],96:[2,89],97:[2,89],98:[2,89],99:[2,89],100:[2,89],101:[2,89],102:[2,89],103:[2,89],105:[2,89],106:[2,89]},{44:[2,134],52:[2,134]},{14:[2,131]},{14:[2,132]},{14:[2,133]},{49:[1,267]},{16:[1,268]},{49:[2,34],51:[2,34]},{49:[2,18],52:[2,18]},{8:[1,165],11:[1,163],30:269,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{11:[1,270]},{16:[1,271]},{14:[1,272]},{10:[2,46],11:[2,46],27:[2,46],49:[2,46],52:[2,46],54:[2,46]},{8:[1,165],11:[1,163],30:273,54:[1,274],57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{8:[1,165],11:[1,163],30:275,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{8:[1,165],11:[1,163],30:276,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{23:[1,277]},{23:[1,278],25:[1,279]},{16:[1,280]},{11:[1,200],33:[1,96],66:[1,97],90:281},{11:[1,200],33:[1,96],66:[1,97],90:282},{11:[1,200],33:[1,96],66:[1,97],90:283},{16:[2,87],23:[2,87],25:[2,87],34:[2,87],65:[2,87],68:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87],79:[2,87],80:[2,87],94:[2,87],95:[2,87],96:[2,87],97:[2,87],98:[2,87],99:[2,87],100:[2,87],101:[2,87],102:[2,87],103:[2,87],105:[2,87],106:[2,87]},{66:[1,284]},{16:[1,285]},{1:[2,31],5:[2,31],37:[2,31],38:[2,31],39:[2,31],42:[2,31],45:[2,31],50:[2,31]},{31:[1,286]},{12:[1,287],35:[1,288]},{27:[2,36],49:[2,36],52:[2,36]},{11:[1,289]},{16:[2,41],31:[2,41]},{8:[1,165],11:[1,163],30:290,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{16:[2,43],31:[2,43]},{16:[2,44],31:[2,44]},{16:[2,10],18:[2,10],19:[2,10],20:[2,10]},{16:[2,12],18:[2,12],19:[2,12],20:[2,12]},{11:[1,291],24:[1,292]},{1:[2,32],5:[2,32],37:[2,32],38:[2,32],39:[2,32],42:[2,32],45:[2,32],50:[2,32]},{16:[2,120],23:[2,120],25:[2,120],34:[2,120],65:[2,120],68:[2,120],75:[2,120],76:[2,120],77:[2,120],78:[2,120],79:[2,120],80:[2,120],94:[2,120],95:[2,120],96:[2,120],97:[2,120],98:[2,120],99:[2,120],100:[2,120],101:[2,120],102:[2,120],103:[2,120],106:[2,120]},{16:[2,122],23:[2,122],25:[2,122],34:[2,122],65:[2,122],68:[2,122],75:[2,122],76:[2,122],77:[2,122],78:[2,122],79:[2,122],80:[2,122],94:[2,122],95:[2,122],96:[2,122],97:[2,122],98:[2,122],99:[2,122],100:[2,122],101:[2,122],102:[2,122],103:[2,122],106:[2,122]},{16:[2,126],23:[2,126],25:[2,126],34:[2,126],65:[2,126],68:[2,126],75:[2,126],76:[2,126],77:[2,126],78:[2,126],79:[2,126],80:[2,126],94:[2,126],95:[2,126],96:[2,126],97:[2,126],98:[2,126],99:[2,126],100:[2,126],101:[2,126],102:[2,126],103:[2,126],106:[2,126]},{16:[2,88],23:[2,88],25:[2,88],34:[2,88],65:[2,88],68:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88],79:[2,88],80:[2,88],94:[2,88],95:[2,88],96:[2,88],97:[2,88],98:[2,88],99:[2,88],100:[2,88],101:[2,88],102:[2,88],103:[2,88],105:[2,88],106:[2,88]},{1:[2,30],5:[2,30],37:[2,30],38:[2,30],39:[2,30],42:[2,30],45:[2,30],50:[2,30]},{11:[1,86],21:[1,89],32:293,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{8:[1,165],11:[1,163],30:294,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{11:[1,295]},{15:[1,296]},{16:[2,42],31:[2,42]},{23:[1,297]},{21:[1,298]},{16:[1,299],25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137]},{31:[1,300]},{12:[1,301]},{11:[1,302]},{16:[2,13],18:[2,13],19:[2,13],20:[2,13]},{11:[1,77],22:303},{11:[2,19],33:[2,19],49:[2,19],52:[2,19]},{11:[1,86],21:[1,89],32:304,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{8:[1,165],11:[1,163],30:305,57:162,58:[1,164],59:[1,166],69:[1,47],70:[1,48],71:[1,49],72:[1,50],73:[1,51]},{16:[1,306]},{23:[1,307]},{16:[1,308],25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137]},{31:[1,309]},{27:[2,7],49:[2,7],52:[2,7],54:[2,7]},{23:[1,310]},{11:[2,20],33:[2,20],49:[2,20],52:[2,20]},{11:[1,86],21:[1,89],32:311,33:[1,96],66:[1,97],71:[1,83],81:85,82:[1,90],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,95],90:87,104:[1,84],105:[1,88]},{16:[2,14],18:[2,14],19:[2,14],20:[2,14]},{16:[1,312],25:[1,124],34:[1,135],65:[1,129],75:[1,119],76:[1,120],77:[1,123],78:[1,125],79:[1,126],80:[1,127],94:[1,121],95:[1,122],96:[1,128],97:[1,130],98:[1,131],99:[1,132],100:[1,133],101:[1,134],102:[1,136],103:[1,137]},{11:[2,21],33:[2,21],49:[2,21],52:[2,21]}],
defaultActions: {23:[2,50],38:[2,141],73:[2,25],90:[2,72],91:[2,73],92:[2,74],93:[2,75],94:[2,76],95:[2,77],225:[2,4],226:[2,5],236:[2,55],244:[2,131],245:[2,132],246:[2,133]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore multiline comment */ ;
break;
case 2:/* ignore end of line comment */;
break;
case 3:/* ignore functions */
break;
case 4:return 18;
break;
case 5:return 25;
break;
case 6:return 77;
break;
case 7:return 59;
break;
case 8:return 7;
break;
case 9:return 78;
break;
case 10:return 39;
break;
case 11:return 27;
break;
case 12:return 41;
break;
case 13:return 49;
break;
case 14:return 51;
break;
case 15:return 44;
break;
case 16:return 38;
break;
case 17:return 45;
break;
case 18:return 110;
break;
case 19:return 82;
break;
case 20:return 15;
break;
case 21:return 70;
break;
case 22:return 10;
break;
case 23:return 79;
break;
case 24:return 58;
break;
case 25:return 73;
break;
case 26:return 71;
break;
case 27:return 104;
break;
case 28:return 86;
break;
case 29:return 14;
break;
case 30:return 24;
break;
case 31:return 56;
break;
case 32:return 83;
break;
case 33:return 69;
break;
case 34:return 50;
break;
case 35:return 37;
break;
case 36:return 111;
break;
case 37:return 33;
break;
case 38:return 8;
break;
case 39:return 72;
break;
case 40:return 84;
break;
case 41:return 20;
break;
case 42:return 19;
break;
case 43:return 85;
break;
case 44:return 42;
break;
case 45:return 54;
break;
case 46:return 87;
break;
case 47:return 52;
break;
case 48:return 11;
break;
case 49:return 71;
break;
case 50:return 102;
break;
case 51:return 108;
break;
case 52:return 103;
break;
case 53:return 31;
break;
case 54:return 101;
break;
case 55:return 16;
break;
case 56:return 12;
break;
case 57:return 23;
break;
case 58:return 21;
break;
case 59:return 65;
break;
case 60:return "'";
break;
case 61:return 68;
break;
case 62:return 75;
break;
case 63:return 76;
break;
case 64:return 97;
break;
case 65:return 80;
break;
case 66:return 94;
break;
case 67:return 95;
break;
case 68:return 106;
break;
case 69:return 105;
break;
case 70:return 35;
break;
case 71:return 96;
break;
case 72:return 98;
break;
case 73:return 100;
break;
case 74:return 99;
break;
case 75:return 34;
break;
case 76:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\(\*(.|\n|\r)*\*\))/,/^(?:--.*)/,/^(?:FUNCTION(.|\n|\r)*END_FUNCTION;)/,/^(?:ABSTRACT\b)/,/^(?:ANDOR\b)/,/^(?:AND\b)/,/^(?:ARRAY\b)/,/^(?:BAG\b)/,/^(?:OR\b)/,/^(?:CONSTANT\b)/,/^(?:DERIVE\b)/,/^(?:END_CONSTANT\b)/,/^(?:END_ENTITY\b)/,/^(?:END_RULE\b)/,/^(?:END_TYPE\b)/,/^(?:END_SCHEMA\b)/,/^(?:ENTITY\b)/,/^(?:ENUMERATION\b)/,/^(?:EXISTS\b)/,/^(?:FOR\b)/,/^(?:INTEGER\b)/,/^(?:INVERSE\b)/,/^(?:IN\b)/,/^(?:LIST\b)/,/^(?:LOGICAL\b)/,/^(?:NUMBER\b)/,/^(?:NOT\b)/,/^(?:NVL\b)/,/^(?:OF\b)/,/^(?:ONEOF\b)/,/^(?:OPTIONAL\b)/,/^(?:QUERY\b)/,/^(?:REAL\b)/,/^(?:RULE\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SELF\b)/,/^(?:SET\b)/,/^(?:STRING\b)/,/^(?:SIZEOF\b)/,/^(?:SUBTYPE\b)/,/^(?:SUPERTYPE\b)/,/^(?:TYPEOF\b)/,/^(?:TYPE\b)/,/^(?:UNIQUE\b)/,/^(?:USEDIN\b)/,/^(?:WHERE\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?::<>:)/,/^(?:\?)/,/^(?::=:)/,/^(?::=)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\))/,/^(?:\()/,/^(?:\|\|)/,/^(?:')/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:<\*)/,/^(?:<)/,/^(?:>)/,/^(?:\])/,/^(?:\[)/,/^(?:\.)/,/^(?:\|)/,/^(?:\*)/,/^(?:-)/,/^(?:\+)/,/^(?:\\)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = express_parser;
exports.Parser = express_parser.Parser;
exports.parse = function () { return express_parser.parse.apply(express_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}